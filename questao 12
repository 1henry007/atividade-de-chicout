#include <stdio.h>
#include <stdlib.h>

#define MAX_TEXTO 10000
#define MAX_PALAVRA 100

typedef struct {
    char palavra[MAX_PALAVRA];
    int frequencia;
} Palavra;

int eAlfanumerico(char c) {
    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9');
}

char paraMinuscula(char c) {
    return (c >= 'A' && c <= 'Z') ? c + ('a' - 'A') : c;
}

int comprimento(const char *s) {
    int i = 0;
    while (s[i]) i++;
    return i;
}

int comparar(const char *a, const char *b) {
    while (*a && (*a == *b)) a++, b++;
    return *a == *b;
}

void copiar(char *dest, const char *src) {
    while ((*dest++ = *src++));
}

int separarPalavras(const char *texto, Palavra *palavras) {
    int i = 0, j = 0, n = 0;
    char palavra[MAX_PALAVRA];

    while (texto[i]) {
        if (eAlfanumerico(texto[i]))
            palavra[j++] = paraMinuscula(texto[i]);
        else if (j > 0) {
            palavra[j] = '\0';
            int encontrada = 0;
            for (int k = 0; k < n; k++) {
                if (comparar(palavras[k].palavra, palavra)) {
                    palavras[k].frequencia++;
                    encontrada = 1;
                    break;
                }
            }
            if (!encontrada) {
                copiar(palavras[n].palavra, palavra);
                palavras[n++].frequencia = 1;
            }
            j = 0;
        }
        i++;
    }
    return n;
}

const char* maiorPalavra(Palavra *p, int n) {
    const char *maior = p[0].palavra;
    for (int i = 1; i < n; i++) 
        if (comprimento(p[i].palavra) > comprimento(maior)) maior = p[i].palavra;
    return maior;
}

const char* menorPalavra(Palavra *p, int n) {
    const char *menor = p[0].palavra;
    for (int i = 1; i < n; i++) 
        if (comprimento(p[i].palavra) < comprimento(menor)) menor = p[i].palavra;
    return menor;
}

const char* maisFrequente(Palavra *p, int n) {
    const char *frequente = p[0].palavra;
    int maxFreq = p[0].frequencia;
    for (int i = 1; i < n; i++) 
        if (p[i].frequencia > maxFreq) {
            maxFreq = p[i].frequencia;
            frequente = p[i].palavra;
        }
    return frequente;
}

float mediaLetras(Palavra *p, int n) {
    int totalLetras = 0, totalPalavras = 0;
    for (int i = 0; i < n; i++) {
        totalLetras += comprimento(p[i].palavra) * p[i].frequencia;
        totalPalavras += p[i].frequencia;
    }
    return (float)totalLetras / totalPalavras;
}

int main() {
    char texto[MAX_TEXTO];
    Palavra palavras[MAX_TEXTO];
    printf("Digite o texto:\n");
    fgets(texto, MAX_TEXTO, stdin);

    int total = separarPalavras(texto, palavras);

    printf("\nTotal de palavras: %d\n", total);
    printf("Maior palavra: %s\n", maiorPalavra(palavras, total));
    printf("Menor palavra: %s\n", menorPalavra(palavras, total));
    printf("Palavra mais frequente: %s\n", maisFrequente(palavras, total));
    printf("Media de letras por palavra: %.2f\n", mediaLetras(palavras, total));

    return 0;
}
